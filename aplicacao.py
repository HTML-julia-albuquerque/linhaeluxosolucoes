# -*- coding: utf-8 -*-
"""aplicacao.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lHY--yx8tGPAw3Vbz869zhrcU_t-oWpz
"""

#Aplicação com todos os códigos unidos por Nicolas E.

class users:
    def __init__(self):
        self._pilha_sessoes = []
        self._clientes = {}

    def registrar(self, email: str, nome: str, senha: str) -> bool:
        if email in self._clientes:
            return False
        self._clientes[email] = {"nome": nome, "senha": senha}
        return True

    def login(self, email: str, senha: str) -> bool:
        dados = self._clientes.get(email)
        if not dados or dados["senha"] != senha:
            return False
        self._pilha_sessoes.append(email)
        return True

    def logout(self) -> str | None:
        if not self._pilha_sessoes:
            return None
        return self._pilha_sessoes.pop()

    def cliente_atual(self) -> str | None:
        return self._pilha_sessoes[-1] if self._pilha_sessoes else None

clientes = {}

while True:
    print("1 - Cadastrar cliente")
    print("2 - Mostrar dados do cliente")
    print("3 - Sair")
    opcao = input("Escolha uma opção: ")

    if opcao == "1":
        email = input("Email: ")
        nome = input("Nome: ")
        endereco = input("Endereco: ")
        clientes[email] = {"nome": nome, "endereco": endereco}
        print("Cliente cadastrado com sucesso\n")

    elif opcao == "2":
        email = input("Digite o email do cliente: ")
        if email in clientes:
            dados = clientes[email]
            print(f"Nome: {dados['nome']}")
            print(f"Endereco: {dados['endereco']}\n")
        else:
            print("Cliente nao encontrado\n")

    elif opcao == "3":
        break

    else:
        print("Opcao invalida\n")

class inventory:

  roupas_dict = {'blusa de frio': ('19,99', 'cashmere'),
                'blusa de calor': ('17,00', 'algodão'),
                'calça jeans':('30,00', 'jeans'),
                'short': ('15,00', 'jeans'),
                'calca legging':('20,00', 'Poliéster'),
                'luva': ('15,00', 'algodão'),
                'gorro': ('15,00', 'algodão'),
                'chapeu': ('10,00', 'algodão')}

  for produto in roupas_dict.keys():
      print(produto)
  produto = str(input('Digite o produto que você deseja visualizar: ')).lower()
  if produto in roupas_dict:
    print(roupas_dict[produto])

  else:
      print("Perdão, ainda não temos esse produto!")

class forms_pagament:

  def mostrar_formas_pagamento():
      print("Formas de pagamento disponíveis:")
      print("1 - Cartão de débito")
      print("2 - Cartão de Crédito")
      print("3 - Pix")

  def calcular_pagamento(valor, opcao):
      if opcao in [1, 2, 3]:
          return valor  # Sem alteração no valor
      else:
          print("Opção inválida.")
          return None

  valor_total = float(input("Digite o valor total da compra: R$ "))
  mostrar_formas_pagamento()
  opcao_escolhida = int(input("Escolha a forma de pagamento (1-3): "))
  valor_final = calcular_pagamento(valor_total, opcao_escolhida)

  if valor_final is not None:
      print(f"Forma de pagamento escolhida: {opcao_escolhida}")
      print(f"Valor final a pagar: R$ {valor_final:.2f}")

class Cart(list):
  def __init__(self, *args):
    super().__init__(args)
  def add_item(self, item):
    self.append(item)
  def clear_cart(self):
    for i in self:
      self.remove(i)
  def rem_item(self, item):
    try:
      self.remove(item)
    except ValueError:
      print("Item não encontrado")
  def view_cart(self):
    if not self:
      print("Seu carrinho está vazio")
    else:
      for i in self:
       print(i)

meu_carrinho = Cart()

class options:

import sys
from collections import deque #Permite enfilherar e desenfilherar na forma de pagamento

class Users: #Login, Logout e Registro usando pilha

    def __init__(self):
        self._pilha_sessoes: list[str] = []
        self._clientes: dict[str, dict[str, str]] = {}

    def registrar(self, email: str, nome: str, telefone: str, endereco: str, senha: str) -> bool:
        if email in self._clientes:
            return False

        self._clientes[email] = {
            "nome": nome,
            "telefone": telefone,
            "endereco": endereco,
            "senha": senha
        }
        return True

    def login(self, email: str, senha: str) -> bool: # Loga um novo usuário no sistema e retornando False se o email e senha forem corretos, se não retorna false
        dados = self._clientes.get(email)
        if not dados or dados["senha"] != senha:
            return False
        self._pilha_sessoes.append(email)
        return True

    def logout(self) -> str | None: #Desloga o ultimo usuário logado (LIFO)

        if not self._pilha_sessoes:
            return None
        return self._pilha_sessoes.pop()

    def cliente_atual(self) -> str | None:  #Retorna o email do usuário atualmente logado (topo da pilha), ou None se não houver.

        return self._pilha_sessoes[-1] if self._pilha_sessoes else None

    def esta_logado(self) -> bool: #Retorna True se houver ao menos uma sessão aberta.

        return bool(self._pilha_sessoes)

    def obter_dados_sem_senha(self, email: str) -> dict[str, str] | None: #Exibe todos os produtos disponíveis com seus preços, mas se o email não estiver cadastrado, retorna None.

        dados = self._clientes.get(email)
        if not dados:
            return None

        return {
            "Nome": dados["nome"],
            "E-mail": email,
            "Telefone": dados["telefone"],
            "Endereço": dados["endereco"]
        }

class Inventory: #Gerencia o inventário dos produto usando dicionário

    def __init__(self):
        # Dicionário nome_do_produto -> preço_em_float
        self._produtos: dict[str, float] = {
            "blusa de frio": 19.99,
            "blusa de calor": 17.00,
            "calça jeans": 30.00,
            "short": 15.00,
            "calça legging": 20.00,
            "luva": 15.00,
            "gorro": 15.00,
            "chapéu": 10.00
        }

    def listar_produtos(self) -> None: #Exibe todos os produtos disponíveis com seus preços.

        if not self._produtos:
            print("Nenhum produto no inventário.")
            return
        print("\n--- Inventário de Produtos ---")
        for nome, preco in self._produtos.items():
            print(f"{nome.title():<20} R$ {preco:.2f}")
        print("------------------------------\n")

    def existe_produto(self, nome: str) -> bool: # Retorna o preço do produto, ou None se não existir.

        return nome.lower() in self._produtos

    def obter_preco(self, nome: str) -> float | None: # Retorna o preço do produto, ou None se não existir.

        return self._produtos.get(nome.lower())

class Cart: #Gerencia o carinho do usuário usando vetor

    def __init__(self):

        self._itens: list[tuple[str, float]] = [] # Lista de tuplas (nome_do_produto, preço)

    def add_item(self, nome: str, preco: float) -> None: #Adiciona um item ao carrinho.

        self._itens.append((nome, preco))
        print(f"'{nome.title()}' adicionado ao carrinho.")

    def rem_item(self, nome: str) -> bool: #Remove um item do carrinho pelo nome (True), caso contrário, false

        for i, (prod, prec) in enumerate(self._itens):
            if prod.lower() == nome.lower():
                self._itens.pop(i)
                print(f"'{prod.title()}' removido do carrinho.")
                return True
        print(f"Item '{nome.title()}' não encontrado no carrinho.")
        return False

    def view_cart(self) -> None:  #Exibe os itens do carrinho. Se vazio, mostra mensagem.

        if not self._itens:
            print("\nSeu carrinho está vazio.\n")
            return
        print("\n--- Itens no Carrinho ---")
        total = 0.0
        for nome, preco in self._itens:
            print(f"{nome.title():<20} R$ {preco:.2f}")
            total += preco
        print(f"--------------------------\nTotal: R$ {total:.2f}\n")

    def clear_cart(self) -> None: #Esvazia o carrinho por completo.

        self._itens.clear()
        print("Carrinho esvaziado.")

    def total(self) -> float: #Retorna o valor total dos itens no carrinho.

        return sum(preco for _, preco in self._itens)

    def esta_vazio(self) -> bool: #Retorna True se o carrinho estiver vazio.

        return len(self._itens) == 0


class PaymentMethods: #Gerencia formas de pagamento usando fila (deque).

    def __init__(self):

        self._fila: deque[str] = deque(["Cartão Débito", "Cartão Crédito", "Pix"])  # Fila (deque) com as formas de pagamento na ordem desejada

    def mostrar_formas(self) -> None:  #Exibe as formas de pagamento disponíveis, em ordem da fila.

        print("\n--- Formas de Pagamento Disponíveis ---")
        temp_queue = deque()
        idx = 1
        while self._fila: # Percorremos a fila sem esvaziar, usando deque temporária
            metodo = self._fila.popleft()
            print(f"{idx} - {metodo}")
            temp_queue.append(metodo)
            idx += 1
        self._fila = temp_queue # Restauramos a fila original
        print("---------------------------------------\n")

    def calcular_pagamento(self, valor: float, opcao: int) -> float | None: #Retorna o valor final a pagar, ou None se inválido

        if opcao in [1, 2, 3]:
            return valor
        print("Opção de pagamento inválida.")
        return None

    def metodo_por_indice(self, opcao: int) -> str | None: #Retorna a forma de pagamento correspondente ao índice (1-based), ou None se inválido.

        if opcao < 1 or opcao > len(self._fila):
            return None
        return list(self._fila)[opcao - 1] # Como precisamos iterar sem alterar a fila, convertemos para lista temporária


class Options: #Integração e interface

    def __init__(self):
        self.usuarios = Users()
        self.inventario = Inventory()
        self.carrinho: Cart | None = None  # Cada usuário logado terá seu próprio carrinho instanciado após o login
        self.pagamentos = PaymentMethods()

    def executar(self) -> None: #Menu (loop principal)

        while True:
            print("====== E-commerce de Roupas ======")
            print("1 - Registrar cliente")
            print("2 - Login")
            print("3 - Visualizar inventário")
            print("4 - Adicionar item ao carrinho")
            print("5 - Remover item do carrinho")
            print("6 - Ver carrinho")
            print("7 - Finalizar compra (Pagamento)")
            print("8 - Logout")
            print("9 - Sair")
            print("10 - Exibir dados do usuário logado")
            opcao = input("Escolha uma opção: ").strip() #Formata para string sem carcateres de espaços em branco

            if opcao == "1":
                self.op_registrar()
            elif opcao == "2":
                self.op_login()
            elif opcao == "3":
                self.op_ver_inventario()
            elif opcao == "4":
                self.op_adicionar_ao_carrinho()
            elif opcao == "5":
                self.op_remover_do_carrinho()
            elif opcao == "6":
                self.op_ver_carrinho()
            elif opcao == "7":
                self.op_finalizar_compra()
            elif opcao == "8":
                self.op_logout()
            elif opcao == "9":
                print("Obrigado por visitar nossa loja. Até logo!")
                sys.exit()
            elif opcao == "10":
                self.op_exibir_dados_usuario()
            else:
                print("Opção inválida. Tente novamente.\n")

    def op_registrar(self) -> None:
      print("\n--- Registro de Cliente ---")
      email = input("E-mail: ").strip()
      nome = input("Nome: ").strip()
      telefone = input("Telefone: ").strip()
      endereco = input("Endereço: ").strip()
      senha = input("Senha: ").strip()
      sucesso = self.usuarios.registrar(email, nome, telefone, endereco, senha) # Passa telefone e endereço ao registrar
      if sucesso:
          print("Cliente cadastrado com sucesso!\n")
      else:
          print("Email já cadastrado. Tente outro.\n")

    def op_login(self) -> None:

        if self.usuarios.esta_logado():
            atual = self.usuarios.cliente_atual()
            print(f"Já há um usuário logado: {atual}. Faça logout antes de logar outro.\n")
            return

        print("\n--- Login de Cliente ---")
        email = input("Email: ").strip()
        senha = input("Senha: ").strip()
        sucesso = self.usuarios.login(email, senha)
        if sucesso:
            self.carrinho = Cart()
            print(f"Login bem-sucedido! Bem-vindo(a), {email}.\n")
        else:
            print("Falha no login. Verifique email e senha.\n")

    def op_ver_inventario(self) -> None: #Opção 3: Exibe o inventário de produtos.

        self.inventario.listar_produtos()

    def op_adicionar_ao_carrinho(self) -> None:  #Opção 4: Adiciona um item ao carrinho.

        if not self.usuarios.esta_logado():
            print("Você precisa estar logado para adicionar itens ao carrinho.\n")
            return
        produto = input("Digite o nome do produto que deseja adicionar: ").strip().lower()
        if self.inventario.existe_produto(produto):
            preco = self.inventario.obter_preco(produto)
            assert preco is not None  # para satisfazer o tipo
            assert self.carrinho is not None
            self.carrinho.add_item(produto, preco)
            print()
        else:
            print("Produto não encontrado no inventário.\n")

    def op_remover_do_carrinho(self) -> None: #Opção 5: Remove um item do carrinho.

        if not self.usuarios.esta_logado():
            print("Você precisa estar logado para remover itens do carrinho.\n")
            return
        assert self.carrinho is not None
        produto = input("Digite o nome do produto que deseja remover: ").strip().lower()
        self.carrinho.rem_item(produto)
        print()

    def op_ver_carrinho(self) -> None: # Opção 6: Exibe os itens atualmente no carrinho.

        if not self.usuarios.esta_logado():
            print("Você precisa estar logado para ver o carrinho.\n")
            return
        assert self.carrinho is not None
        self.carrinho.view_cart()

    def op_finalizar_compra(self) -> None: #Opção 7: Finaliza a compra, exibe total e solicita forma de pagamento.

        if not self.usuarios.esta_logado():
            print("Você precisa estar logado para finalizar a compra.\n")
            return
        assert self.carrinho is not None
        if self.carrinho.esta_vazio():
            print("Seu carrinho está vazio. Adicione itens antes de finalizar a compra.\n")
            return

        total = self.carrinho.total()
        print(f"\nTotal da compra: R$ {total:.2f}")
        self.pagamentos.mostrar_formas()

        try:
            escolha = int(input("Escolha a forma de pagamento (número): ").strip())
        except ValueError:
            print("Entrada inválida. Digite o número correspondente à forma de pagamento.\n")
            return

        metodo = self.pagamentos.metodo_por_indice(escolha)
        if metodo is None:
            print("Opção de pagamento inválida.\n")
            return

        valor_final = self.pagamentos.calcular_pagamento(total, escolha)
        if valor_final is None:
            print("Não foi possível calcular o pagamento.\n")
            return

        print(f"Forma de pagamento escolhida: {metodo}")
        print(f"Valor final a pagar: R$ {valor_final:.2f}")
        print("Pagamento realizado com sucesso! Obrigado pela compra.\n")
        self.carrinho.clear_cart() # Depois do pagamento, esvazia o carrinho
        print()

    def op_logout(self) -> None: #Opção 8: Desloga o usuário atual.

        if not self.usuarios.esta_logado():
            print("Nenhum usuário está logado.\n")
            return
        email = self.usuarios.logout()
        self.carrinho = None
        print(f"Logout bem-sucedido: {email}\n")

    def op_exibir_dados_usuario(self) -> None: #Opção 10: Exibe em formato de matriz os dados do usuário logado (sem a senha).

        if not self.usuarios.esta_logado():
            print("Você precisa estar logado para ver seus dados.\n")
            return

        email_atual = self.usuarios.cliente_atual()
        assert email_atual is not None

        dados = self.usuarios.obter_dados_sem_senha(email_atual)
        if dados is None:
            print("Erro ao obter dados do usuário.\n")
            return
        print("\n--- Dados do Usuário ---")
        print(f"{'Tipo de dado':<15} | {'Valor':<40}") #Exibe em formato de matriz os dados do usuário logado (sem a senha).
        print("-" * 60)
        for tipo, valor in dados.items():
            print(f"{tipo:<15} | {valor:<40}")
        print("-" * 60 + "\n")

if __name__ == "__main__":
    loja = Options()
    loja.executar()

